{
  // Place your greenvinyl-vue workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Default Vue Template for TypeScript": {
    "scope": "vue",
    "prefix": "vueTS",
    "body": [
      "<template>",
      "  ${0}",
      "</template>",
      "",
      "<script lang=\"ts\">",
      "import { Vue, Component, Prop } from \"vue-property-decorator\"",
      "",
      "@Component({ components: {} })",
      "export default class ${1:ComponentName} extends Vue {",
      "  // props",
      "",
      "  @Prop({ type: Boolean, default: false }) readonly isButton?: Boolean",
      "  // data",
      "  message = 'Hello'",
      "",
      "  // computed",
      "  get reverseMessage () {",
      "    return this.message.split('').reverse().join('')",
      "  }",
      "",
      "  // method",
      "  changeMessage () {",
      "    this.message = 'Good bye'",
      "  }",
      "",
      "  // Lifecycle hooks",
      "  created() {}",
      "  mounted() {}",
      "  updated() {}",
      "  destroyed() {}",
      "}",
      "</script>",
      ""
    ],
    "description": "Default Vue Template for TypeScript"
  }
}
